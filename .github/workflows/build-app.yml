name: Build App

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: windows-latest
    
    strategy:
      matrix:
        arch: [x64, x86]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'

    - name: Install PyInstaller and dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install ghapi

    - name: Build executable with PyInstaller
      run: |
        pyinstaller --onefile --noconsole --icon=favicon.ico --add-data "favicon.ico;." --arch ${{ matrix.arch }} --name "CPPU-ClickToLogin-${{ matrix.arch }}"CPPU-ClickToLogin.py
        mv dist/* ../dist/

    - name: Get current date and format it
      id: date
      run: |
        current_date=$(TZ="Asia/Shanghai" date "+%Y%m%d")
        echo "Current date: $current_date"
        echo "::set-output name=date::$current_date"

    - name: Get existing releases and count versions
      id: releases
      run: |
        current_date=${{ steps.date.outputs.date }}
        release_tag_prefix="v${current_date}-"
        release_numbers=$(gh release list --json tagName -q ".[] | select(.tagName | startswith(\"${release_tag_prefix}\")) | .tagName" || echo "")

        release_count=$(echo "$release_numbers" | wc -l)
        
        if [ $release_count -gt 0 ]; then
          max_version=$(echo "$release_numbers" | sort -V | tail -n 1)
          version_number=$(echo $max_version | sed 's/^.*-\([0-9]*\)$/\1/')
          new_version_number=$(printf "%02d" $((version_number + 1)))
        else
          new_version_number="01"
        fi

        new_tag="v${current_date}-${new_version_number}"
        echo "::set-output name=tag::$new_tag"

    - name: Create new release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        release_tag=${{ steps.releases.outputs.tag }}
        echo "Creating new release with tag: $release_tag"
        
        gh release create "$release_tag" dist/* --title "Release $release_tag" --notes "Automated release for $release_tag"

    - name: Upload files to release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release upload ${{ steps.releases.outputs.tag }} dist/* --clobber
